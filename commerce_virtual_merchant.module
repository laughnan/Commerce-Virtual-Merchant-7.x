<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_virtual_merchant_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_virtual_merchant'] = array(
    'base' => 'commerce_virtual_merchant',
    'title' => t('Virtual Merchant'),
    'short_title' => t('Virtual Merchant'),
    'display_title' => t('Credit Card'),
    'description' => t('Integrates Virtual Merchant credit card transactions.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements payment callback for settings form.
 */
function commerce_virtual_merchant_settings_form($settings = NULL) {

  $form = array();

  // Merge default settings into the stored settings array.

  $settings = (array) $settings + array(
    'merchant_id' => '',
    'user_id' => '',
    'pin' => '',
    'mode' => 'test',
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your merchant ID is the Account number you use to login at Virtual Merchant.'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );

  $form['user_id'] = array(
    '#type' => 'textfield',
    '#title' => t('User ID'),
    '#description' => t('Same as the user ID you use to login at Virtual Merchant.'),
    '#default_value' => $settings['user_id'],
    '#required' => TRUE,
  );
  
  $form['pin'] = array(
    '#type' => 'textfield',
    '#title' => t('PIN'),
    '#description' => t('Found through the User > Change PIN menu item at Virtual Merchant.'),
    '#default_value' => $settings['pin'],
    '#required' => TRUE,
  );

  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Make sure you update to production mode when your site goes live!'),
    '#options' => array(
      'production' => t('Production'),
      'test' => t('Test'),
      'demo' => t('Demo server'),
    ),
    '#default_value' => $settings['mode'],
  );

  return $form;

} // commerce_virtual_merchant_settings_form

/**
 * Payment method callback: submit form.
 */
function commerce_virtual_merchant_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_virtual_merchant'])) {
    $pane_values += $order->data['commerce_virtual_merchant'];
  }

  // Merge in default values.
  $pane_values += array(
    'name' => '',
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('This is a demonstration field coded to fail validation for single character values.'),
    '#default_value' => $pane_values['name'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_virtual_merchant_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Throw an error if a long enough name was not provided.
  if (strlen($pane_values['name']) < 2) {
    form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));

    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_virtual_merchant_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_virtual_merchant'] = $pane_values;

  commerce_virtual_merchant_transaction($payment_method, $order, $charge, $pane_values['name']);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_virtual_merchant_transaction($payment_method, $order, $charge, $name) {
  $transaction = commerce_payment_transaction_new('commerce_virtual_merchant', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Name: @name';
  $transaction->message_variables = array('@name' => $name);

  commerce_payment_transaction_save($transaction);
}
